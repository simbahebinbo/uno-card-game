server.tomcat.threads.max: 0
server.tomcat.uri-encoding: UTF-8
server.shutdown: graceful


#capacity: 令牌桶容量
#rate: 令牌桶每秒填充平均速率
bucket.capacity: 5000
bucket.rate: 100


logging:
  level:
    com.github.lansheng228: INFO


info.app.name: uno-card-game
info.env.name: test

management.endpoint.health.probes.enabled: true
management.endpoints.web.base-path: /
management.endpoints.web.exposure.include: refresh,health

endpoints.metrics.filter.gaugeSubmissions: PER_HTTP_METHOD
endpoints.metrics.filter.counterSubmissions: PER_HTTP_METHOD

#配置数据库连接地址
#必须使用h2默认的testdb
spring.datasource.url: jdbc:h2:mem:testdb;MODE=MySQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE
spring.datasource.name: dataSource
#SpringBoot在启动时，只有检测到spring.datasource.initialization-mode=ALWAYS配置，再检测spring.datasource.schema之后，且配置的sql脚本命令不为空，才会去执行schema和spring.datasource.data。
spring.datasource.initialization-mode: ALWAYS
#配置数据库驱动
spring.datasource.driver-class-name: org.h2.Driver
#配置数据库用户名
spring.datasource.username: pig
#配置数据库密码
spring.datasource.password: 123456
# 使用H2数据库
spring.datasource.platform: h2
#进行该配置后，每次启动程序，程序都会运行resources/sql/schema.sql文件，对数据库的结构进行操作。
spring.datasource.schema: classpath:sql/schema.sql
#进行该配置后，每次启动程序，程序都会运行resources/sql/data.sql文件，对数据库的数据操作。
spring.datasource.data: classpath:sql/data.sql


# h2 web consloe 是一个数据库GUI管理应用，程序运行时，会自动启动h2 web consloe
#配置能远程访问
spring.h2.console.settings.trace: false
spring.h2.console.settings.web-allow-others: true
#配置访问地址
spring.h2.console.path: /h2-console
#配置项目启动 h2就启动
spring.h2.console.enabled: true



#JPA配置
spring.jpa.database: mysql
# 是否生成ddl语句
spring.jpa.generate-ddl: false
# 是否打印sql语句
spring.jpa.show-sql: true

# 自动生成ddl，由于指定了具体的ddl，此处设置为none
spring.jpa.hibernate.ddl-auto: none

spring.jpa.database-platform: org.hibernate.dialect.H2Dialect



#redis配置
spring.data.redis.host: localhost
spring.data.redis.port: 16340
#连接超时时间（毫秒）
spring.data.redis.timeout: 5000
#连接池最大连接数（使用负值表示没有限制）
spring.data.redis.lettuce.pool.max-active: 8
#连接池中的最大空闲连接
spring.data.redis.lettuce.pool.max-idle: 5
#连接池中的最小空闲连接
spring.data.redis.lettuce.pool.min-idle: 1
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.data.redis.lettuce.pool.max-wait: 5000


spring.data.redis.exchange-servers[0].mode: standalone
spring.data.redis.exchange-servers[0].standalone-node: localhost:16340
spring.data.redis.exchange-servers[0].database: 0
spring.data.redis.exchange-servers[0].max-total: 300
spring.data.redis.exchange-servers[0].min-idle: 50
spring.data.redis.exchange-servers[0].max-idle: 5
spring.data.redis.exchange-servers[0].timeout: 5000
spring.data.redis.exchange-servers[0].max-wait-millis: 5000


http.client.name: HTTPClient
http.client.connect-timeout: 100
http.client.read-timeout: 5000
http.client.write-timeout: 5000
http.client.max-idle-connections: 5
http.client.keep-alive-duration: 3000
http.client.thread-pool-size: 100
http.client.thread-alive-second: 60
http.client.max-requests: 200
http.client.max-requests-per-host: 100
